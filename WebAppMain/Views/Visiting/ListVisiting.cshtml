@using Microsoft.AspNetCore.Identity;
@inject SignInManager<ApplicationUser> signInManager;
@inject UserManager<ApplicationUser> UserManager
@model VisitingListVM
@{
    ViewBag.Title = "Все Посещения";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h1>Все Посещения</h1>


<form asp-controller="Visiting" asp-action="ListVisiting">
    <div class="form-group">
        <label>Фильтрация статуса записи</label>
        <select asp-for="constantFilter" class="form-control">
            <option value="">All</option>

            <option value="Подтвержден">Подтвержден</option>
            <option value="Не подтвержден">Не подтвержден</option>

        </select>
    </div>
    <button type="submit" class="btn btn-primary">фильтр</button>
    <a asp-controller="Visiting" asp-action="ListVisiting">Очистить фильтр</a>
</form>

<div class="col-md-3 ml-auto">
    <form asp-controller="Visiting" asp-action="ListVisiting">
        <div class="form-group">
            <label></label>
            <input type="text" asp-for="SearchString" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Поиск</button>
        <a asp-controller="Visiting" asp-action="ListVisiting">Очистить поиск</a>
    </form>
</div>

<form method="get">
    <div class="form-group">
        <button asp-action="AddVisiting" class="btn btn-primary">
            Добавить новое посещение
        </button>
    </div>
    @if (TempData.ContainsKey("ErrorMessage"))
    {
        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
    }
</form>


<div class="card-tableNew">
    <div class="card-header">
    </div>
    <div class="row">
        @foreach (var visiting in Model.Visiting)
        {
            <div class="col-md-4 col-sm-6 col-12 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Посетитель: </h5>
                        <div>
                            <span class="card-text">

                                @if (await UserManager.IsInRoleAsync(visiting.ApplicationUser, "Гость"))
                                {
                                    @visiting.ApplicationUser.UserName
                                }
                                else
                                {
                                    @visiting.Visitor.Name
                                }
                            </span>
                        </div>
                        <span class="card-text">Услуга: @visiting.Services.NameOfTheService</span>
                        <div>
                            <span class="card-text">Дата посещения: @visiting.DateAndTimeOfTheVisit.ToString("g")</span>
                        </div>
                      
                        <div>
                            <span class="card-text">Количество часов: @visiting.NumberOfHours</span>
                        </div>
                        <div>
                            <span class="card-text">Стоимость: @visiting.TotalCost рублей</span>
                        </div>
                        <div>
                            <span class="card-text">@visiting.Halls.HallsName</span>
                        </div>
                        <div>
                            <span class="card-text"> @visiting.Halls.Computers.FirstOrDefault(c => c.ComputerId == visiting.ComputerId)?.ComputerName</span>
                        </div>


                        @if (await UserManager.IsInRoleAsync(visiting.ApplicationUser, "Гость"))
                        {
                            <div>
                            </div>
                        }
                        else
                        {
                            <div>
                                <span class="card-text">Сотрудник: @visiting.ApplicationUser.UserName</span>
                            </div>


                        }

                        <form method="post" action="@Url.Action("ChangeStatus", "Visiting")">
                            <div class="form-row" style="margin-top: 20px;">
                                <div class="col-md-6 mb-3">
                                    <input type="hidden" name="orderId" value="@visiting.VisitingId" />
                                    <select name="newStatus" class="custom-select">
                                        <option value="Не подтвержден" selected="@(visiting.Status == "Не подтвержден")">Не подтвержден</option>
                                        <option value="Подтвержден" selected="@(visiting.Status == "Подтвержден")">Подтвержден</option>
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <button type="submit" class="btn btn-primary">Сохранить</button>
                                </div>
                            </div>
                        </form>
                        <div class="progress">
                            <div class="progress-bar timer-progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <div>
                            <span class="card-text">Осталось времени: <span class="timer" data-start-date="@visiting.DateAndTimeOfTheVisit.ToString("yyyy-MM-dd HH:mm:ss")" data-end-date="@visiting.DateAndTimeOfTheVisitEnd.ToString("yyyy-MM-dd HH:mm:ss")" data-timer-id="timer1"></span></span>
                        </div>


                    </div>
                    <div class="card-footer">
                        <form asp-action="Delete" asp-route-id="@visiting.VisitingId" method="post">
                            <a asp-action="EditVisiting" asp-controller="Visiting" asp-route-id="@visiting.VisitingId" class="btn btn-primary">Редактирование</a>
                            <button type="submit" class="btn btn-danger"
                                    onclick="return confirm('Вы уверены что хотите удалить информацию о посещении?')">
                                Удаление
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        }
    </div>


    <div class="row">
        <div class="col-md-12">
            <nav>
                <ul class="pagination">
                    @if (Model.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="/Visiting/ListVisiting?page=@(Model.CurrentPage - 1)&amp;searchString=@Model.SearchString&amp;constantFilter=@Model.constantFilter">Previous</a>
                        </li>
                    }
                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        if (i == Model.CurrentPage)
                        {
                            <li class="page-item active">
                                <span class="page-link">@i</span>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" href="/Visiting/ListVisiting?page=@i&amp;searchString=@Model.SearchString&amp;constantFilter=@Model.constantFilter">@i</a>
                            </li>
                        }
                    }
                    @if (Model.CurrentPage < Model.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="/Visiting/ListVisiting?page=@(Model.CurrentPage + 1)&amp;searchString=@Model.SearchString&amp;constantFilter=@Model.constantFilter">Next</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>
</div>

<script>
    // Функция для обновления таймера и прогресс-бара
    function updateTimerAndProgressBar(endDate, element) {
        var now = new Date().getTime();
        var distance = endDate - now;

        // Рассчитываем оставшееся время
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Обновляем содержимое элемента с таймером
        element.innerHTML = days + " дн. " + hours + " ч. " + minutes + " мин. " + seconds + " сек.";

        // Рассчитываем прогресс-бар
        var startDate = new Date(element.dataset.startDate).getTime();
        var totalDuration = endDate - startDate;
        var progress = 100 - (distance / totalDuration) * 100;

        // Обновляем прогресс-бар
        var progressBar = element.closest('.card-body').querySelector('.progress-bar');
        progressBar.style.width = progress + "%";

        // Если время истекло, обновляем содержимое элемента и прогресс-бара
        if (distance < 0) {
            element.innerHTML = "Время истекло";
            progressBar.style.width = "100%";
        }
    }

    // Обновляем все таймеры и прогресс-бары на странице
    function updateTimersAndProgressBars() {
        var timerElements = document.querySelectorAll('.timer');
        timerElements.forEach(function (element) {
            var endDateString = element.getAttribute('data-end-date');
            var endDate = new Date(endDateString).getTime();
            updateTimerAndProgressBar(endDate, element);
        });
    }

    // Вызываем функцию обновления таймеров и прогресс-баров при загрузке страницы и каждую секунду
    window.addEventListener('DOMContentLoaded', function () {
        updateTimersAndProgressBars();
        setInterval(updateTimersAndProgressBars, 1000);
    });
    </script>